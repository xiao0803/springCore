<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

	<!-- 使用C3P0数据库连接池作为数据源 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPolledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost/test" />
		<property name="user" value="root" />
		<property name="password" value="root" />
		<property name="maxPoolSize" value="40" />
		<property name="minPoolSize" value="4" />
		<property name="initialPoolSize" value="10" />
		<property name="maxIdleTime" value="20" />
	</bean> -->

	<!-- 配置Druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="jdbc:mysql://localhost/test?serverTimezone=Asia/Shanghai" />
		<property name="username" value="root" />
		<property name="password" value="" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="100" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,wall" />
	</bean>
	

	<!-- 配置JDBC数据源的局部事务管理器，使用DataSourceTransactionManager类，该类实现了 PlatformTransactionManager接口，是针对采用数据源连接的特定实现 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 配置TransactionManager时需要注入数据源引用 -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 下面这个是前面定义的业务Bean -->
	<bean id="newsDao" class="com.example.tx.impl.NewsDaoImpl">
		<!-- 为业务Bean注入属性 -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="newsDaoTransProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<!-- 为事务代理工厂Bean注入事务管理器 -->
		<property name="transactionManager" ref="transactionManager" />
		<!-- 要在哪个Bean上面创建事务代理对象 -->
		<property name="target" ref="newsDao" />
		<!-- 指定事务属性 -->
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

</beans>